# TOG Tree
> Procedurally generated tree in Unity

This is an experiment project based on [an algorithm created by Nick McDonald](https://weigert.vsos.ethz.ch/2020/10/19/transport-oriented-growth-and-procedural-trees/). I hold no credit on the creation of the algorithm other than porting it into C#/Unity. This is not meant for commercial use, but feel free to experiment with it.


![](ReadMe/tree.png)

## Usage example

To grow the tree in Unity, please see the following.

![](ReadMe/inspector.png)
1. Open the SampleScene.
2. Find the `gameObject` "Tree".
3. Click "GrowAndDraw" to see the growth of the tree.
4. Optionally you can simplify the mesh after step 3, this reduce mesh intersection and the amount of vertices, but can also introduce some serious artifacts.

One can also tweak the settings in the scriptable object "DefaultGrowthModel".
![](ReadMe/settings.png)

## Credits

[Nick McDonald](https://weigert.vsos.ethz.ch/about/) â€“ For creating the core algorithm.

[Geometry3Sharp Creators](https://github.com/gradientspace/geometry3Sharp) - The library is used for mesh simplification

[Colin Leung](https://github.com/ColinLeung-NiloCat/UnityURPToonLitShaderExample) - I used the toon shader for improvement on visuals.